#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
  void *data;
  struct Node *next;
} Node;

typedef struct List {
  Node *head;
  int data_size;
} List;

void list_init(List *list, int data_size) {
  list->head = NULL;
  list->data_size = data_size;
}

void list_insert(List *list, void *data) {
  Node *node = (Node *) malloc(sizeof(Node));
  node->data = malloc(list->data_size);
  node->next = list->head;
  for (int i = 0; i < list->data_size; i++) {
    *((char *)node->data + i) = *((char *)data + i);
  }
  list->head = node;
}

void list_reverse(List *list) {
  Node *prev = NULL;
  Node *current = list->head;
  Node *next = NULL;
  while (current != NULL) {
    next = current->next;
    current->next = prev;
    prev = current;
    current = next;
  }
  list->head = prev;
}

void list_print(List *list, void (*print_data)(void *)) {
  Node *node = list->head;
  while (node != NULL) {
    print_data(node->data);
    node = node->next;
  }
}

void int_print(void *data) {
  printf("%d ", *((int *)data));
}

int main() {
  List list;
  list_init(&list, sizeof(int));
  int data[] = {1, 2, 3, 4, 5};
  for (int i = 0; i < 5; i++) {
    list_insert(&list, &data[i]);
  }
  printf("Original List: ");
  list_print(&list, int_print);
  printf("\n");
  list_reverse(&list);
  printf("Reversed List: ");
  list_print(&list, int_print);
  printf("\n");
  return 0;
}
